package pikavision;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import pikavision.LineResult.ByValue;
/**
 * JNA Wrapper for library <b>pikaVision</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface PikaVisionLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "/home/admin/libvision.so";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(PikaVisionLibrary.JNA_LIBRARY_NAME);
	public static final PikaVisionLibrary INSTANCE = (PikaVisionLibrary)Native.loadLibrary(PikaVisionLibrary.JNA_LIBRARY_NAME, PikaVisionLibrary.class);
	/**
	 * Rotation direction.<br>
	 * <i>native declaration : line 9</i><br>
	 * enum values
	 */
	public static interface rotation_t {
		/**
		 * < Rotated anticlockwise<br>
		 * <i>native declaration : line 10</i>
		 */
		public static final int ANTICLOCKWISE = -1;
		/**
		 * < Not rotated<br>
		 * <i>native declaration : line 11</i>
		 */
		public static final int NONE = 0;
		/**
		 * < Rotated clockwise<br>
		 * <i>native declaration : line 12</i>
		 */
		public static final int CLOCKWISE = 1;
	};
	/**
	 * Starts the vision system from a feed path.<br>
	 *  @param feedPath URI of feed source.<br>
	 *  @returns InstanceStore for current vision system instance.<br>
	 *  @note See CamFeed::CamFeed(const char * feedPath) for details on URI specification.<br>
	 * Original signature : <code>InstanceStore* initFeed(const char*)</code><br>
	 * <i>native declaration : line 42</i><br>
	 * @deprecated use the safer methods {@link #initFeed(java.lang.String)} and {@link #initFeed(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	PikaVisionLibrary.InstanceStore initFeed(Pointer feedPath);
	/**
	 * Starts the vision system from a feed path.<br>
	 *  @param feedPath URI of feed source.<br>
	 *  @returns InstanceStore for current vision system instance.<br>
	 *  @note See CamFeed::CamFeed(const char * feedPath) for details on URI specification.<br>
	 * Original signature : <code>InstanceStore* initFeed(const char*)</code><br>
	 * <i>native declaration : line 42</i>
	 */
	PikaVisionLibrary.InstanceStore initFeed(String feedPath);
	/**
	 * Starts the vision system with a USB camera.<br>
	 *  @param camIndex Index of the camera to use.<br>
	 *  @returns InstanceStore for current vision system instance.<br>
	 *  @note See CamFeed::CamFeed(int camIndex) for details on camera indexes.<br>
	 * Original signature : <code>InstanceStore* initCamera(int)</code><br>
	 * <i>native declaration : line 49</i>
	 */
	PikaVisionLibrary.InstanceStore initCamera(int camIndex);
	/**
	 * Process a new frame for vision.<br>
	 *  @param store Pointer to the store returned by initFeed() or initCamera().<br>
	 *  @returns LineResult Output of vision system.<br>
	 * Original signature : <code>LineResult processFrame(InstanceStore*)</code><br>
	 * <i>native declaration : line 55</i>
	 */
	ByValue processFrame(PikaVisionLibrary.InstanceStore store);
	/**
	 * Sets the thresholding cuttoff value.<br>
	 *  If not run, the value will default to 234.<br>
	 *  @param store Pointer to the store returned by initFeed() or initCamera().<br>
	 *  @param newThreshold The new threshold value - takes values 0-255 (inclusive).<br>
	 *  @returns true if operation was successful, false if newThreshold was invalid or if store is null.<br>
	 *  @note Try to have this as close to 255 as possible while still being able to detect the target reliably.<br>
	 *  @note Can be changed multiple times.<br>
	 * Original signature : <code>bool setThreshold(InstanceStore*, int)</code><br>
	 * <i>native declaration : line 65</i>
	 */
	byte setThreshold(PikaVisionLibrary.InstanceStore store, int newThreshold);
	/**
	 * Close/release the camera and deallocate all used memory.<br>
	 *  @param store Pointer to the store returned by initFeed() or initCamera().<br>
	 * Original signature : <code>void closeCamera(InstanceStore*)</code><br>
	 * <i>native declaration : line 70</i>
	 */
	void closeCamera(PikaVisionLibrary.InstanceStore store);
	public static class InstanceStore extends PointerType {
		public InstanceStore(Pointer address) {
			super(address);
		}
		public InstanceStore() {
			super();
		}
	};
}
