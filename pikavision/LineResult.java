package pikavision;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class LineResult extends Structure {
	/** < If there was a fatal issue with capturing/processing the frame. */
	public byte isProcessed;
	/** < If there was a fatal issue with capturing/processing the frame. */
	public byte isGood;
	/** < Centeral X position of the target - goes from -100.0f to 100.0f, 0.0f being centered. */
	public float xPos;
	/** < Combined width of the bounding boxes of the targets - goes from 0.0f to 100.0f. */
	public float width;
	/**
	 * @see rotation_t<br>
	 * < Rotation direction of the target.<br>
	 * C type : rotation_t
	 */
	public int rotation;
	public LineResult() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("isProcessed", "isGood", "xPos", "width", "rotation");
	}
	/**
	 * @param isProcessed < If there was a fatal issue with capturing/processing the frame.<br>
	 * @param isGood < If there was a fatal issue with capturing/processing the frame.<br>
	 * @param xPos < Centeral X position of the target - goes from -100.0f to 100.0f, 0.0f being centered.<br>
	 * @param width < Combined width of the bounding boxes of the targets - goes from 0.0f to 100.0f.<br>
	 * @param rotation @see rotation_t<br>
	 * < Rotation direction of the target.<br>
	 * C type : rotation_t
	 */
	public LineResult(byte isProcessed, byte isGood, float xPos, float width, int rotation) {
		super();
		this.isProcessed = isProcessed;
		this.isGood = isGood;
		this.xPos = xPos;
		this.width = width;
		this.rotation = rotation;
	}
	public LineResult(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends LineResult implements Structure.ByReference {
		
	};
	public static class ByValue extends LineResult implements Structure.ByValue {
		
	};
}
